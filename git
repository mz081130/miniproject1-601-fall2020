# Git Repository

* [Repository.md](/Repository)


* A Git repository is the . git/ folder inside a project. This repository tracks all changes made to files in your project, building a history over time. ... git/ folder, then you delete your project's history.

# Git Clone

* [Clone.md](/Clone)

* git clone is a Git command line utility which is used to target an existing repository and create a clone, or copy of the target repository. ... Cloning a local or remote repository. Cloning a bare repository. Using shallow options to partially clone repositories.

# Git Branch

* [Branch.md](/Branch.md)


* A branch represents an independent line of development. ... The git branch command lets you create, list, rename, and delete branches. It doesn't let you switch between branches or put a forked history back together again. For this reason, git branch is tightly integrated with the git checkout and git merge commands.


# Git commit

* [Commit.md](/Commit.md)

* The "commit" command is used to save your changes to the local repository. ... Using the "git commit" command only saves a new commit object in the local Git repository. Exchanging commits has to be performed manually and explicitly (with the "git fetch", "git pull", and "git push" commands).


# Git Merge

* [Merge.md](/Merge)

* Merging is Git's way of putting a forked history back together again. The git merge command lets you take the independent lines of development created by git branch and integrate them into a single branch. ... The current branch will be updated to reflect the merge, but the target branch will be completely unaffected.

# Git Checkout

* [checkout.md](/Checkout.md)

* The git checkout command lets you navigate between the branches created by git branch . Checking out a branch updates the files in the working directory to match the version stored in that branch, and it tells Git to record all new commits on that branch.


# Git Push

* [Push.md](/Push.md)

* The git push command is used to upload local repository content to a remote repository. Pushing is how you transfer commits from your local repository to a remote repo. It's the counterpart to git fetch , but whereas fetching imports commits to local branches, pushing exports commits to remote branches.


# Git Pull


* [Pull.md](/Pull.md)

* The git pull command is used to fetch and download content from a remote repository and immediately update the local repository to match that content. Merging remote upstream changes into your local repository is a common task in Git-based collaboration work flows.


# Git Remote Add

* [Remote Add.md](/Remote Add.md)

* The git remote add command will create a new connection record to a remote repository. After adding a remote, you'll be able to use as a convenient shortcut for in other Git commands. For more information on the accepted URL syntax, view the "Repository URLs" section below.

# Git Remove

* [remove.md](/remove.md)

* git rm is used to remove a file from a Git repository. It is a convenience method that combines the effect of the default shell rm command with git add . This means that it will first remove a target from the filesystem and then add that removal event to the staging index


# Git Show

* [Show.md](/Show.md)


* git-show is a command line utility that is used to view expanded details on Git objects such as blobs, trees, tags, and commits. git-show has specific behavior per object type. Tags show the tag message and other objects included in the tag. Trees show the names and content of objects in a tree


# Git Status

* [Status.md](/Status.md)

* The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git. Status output does not show you any information regarding the committed project history.


# Git Master Branch

* [Master Brancg.md](/Master Branch.md)

* The default branch name in Git is master . As you start making commits, you're given a master branch that points to the last commit you made. Every time you commit, the master branch pointer moves forward automatically. The “master” branch in Git is not a special branch.


